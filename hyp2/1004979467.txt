the major use for hardware random number generators is in the field of data encryption , for example to create random cryptographic keys and nonces needed to encrypt and sign data although these pseudorandom sequences pass randomness tests , by knowing the algorithm and the conditions used to initialize it , called the '' seed '' , the output can be predicted hardware random number generators produce sequences of numbers that are assumed not to be predictable , and therefore provide the greatest security when used to encrypt data this method gives reasonable results in some senses , but the random numbers generated by this means are expensive and , because the world exists at a temperature above absolute zero , every system has some random variation in its state ; for instance , molecules of gases composing air are constantly bouncing off each other in a random way ( see statistical mechanics collecting the noise for use poses some problems , but this is an especially simple random noise source when several such sources are combined carefully ( as in , for example , the yarrow algorithm or fortuna csprngs ) , enough entropy can be collected for the creation of cryptographic keys and nonces , though generally at restricted rates the primary source of randomness typically used in such approaches is the precise timing of the interrupts caused by mechanical input/output devices , such as keyboards and disk drives , various system information counters , etc another variable physical phenomenon that is easy to measure is clock drift there are several ways to measure and use clock drift as a source of randomness instead of using thermal noise , raw bits are generated by using four freerunning oscillators which are designed to run at different rates user software can access the generated random bit stream using new non-privileged machine language instructions since the alarm will not always trigger in exactly one tick , the least significant bits of a count of loop iterations , between setting the alarm and its trigger , will vary randomly , possibly enough for some uses ultra-high speed random number generators often use this method there are several techniques for reducing bias and correlation , often called '' whitening '' algorithms , by analogy with the related problem of producing white noise from a correlated signal a related method which reduces bias in a near random bit stream is to take two or more uncorrelated near random bit streams , and exclusive or them together some designs apply cryptographic hash functions such as md5 , sha-1 , or ripemd-160 or even a crc function to all or part of the bit stream , and then use the output as the random bit stream many physical phenomena can be used to generate bits that are highly biased , but each bit is independent from the others a geiger counter ( with a sample time longer than the tube recovery time ) or a semi-transparent mirror photon detector both generate bit streams that are mostly '' 0 '' ( silent or transmission ) with the occasional '' 1 '' ( click or reflection ) other designs use what are believed to be true random bits as the key for a high quality block cipher algorithm , taking the encrypted output as the random bit stream software engineers without true random number generators often try to develop them by measuring physical events available to the software the method is risky when it uses computer-controlled events because a clever , malicious attacker might be able to predict a cryptographic key by controlling the external events however , with sufficient care , a system can be designed that produces cryptographically secure random numbers from the sources of randomness available in a modern computer the basic design is to maintain an '' entropy pool '' of random bits that are assumed to be unknown to an attacker new randomness is added whenever available ( for example , when the user hits a key ) and an estimate of the number of bits in the pool that can not be known to an attacker is kept some of the strategies in use include : when random bits are requested , return that many bits derived from the entropy pool ( by a cryptographic hash function , say ) and decrement the estimate of the number of random bits remaining in the pool the linux '' /dev/urandom '' device is a simple modification which disregards estimates of input randomness , and is therefore rather less likely to have high entropy as a result one example of a centralized system where a random number can be acquired is the randomness beacon service from the national institute of standards and technology ; another example is random.org , a service that uses atmospheric noise to generate random binary digits ( bits ) just as with other components of a cryptography system , a software random number generator should be designed to resist certain attacks since many practical designs rely on a hardware source as an input , it will be useful to at least check that the source is still operating while detecting a large deviation from perfection would be a sign that a true random noise source has become degraded , small deviations are normal and can be an indication of proper operation , internal temperature , bus voltage ) might be additionally useful as a further check a carefully chosen design , verification that the manufactured device implements that design and continuous physical security to insure against tampering may all be needed in addition to testing for high value uses . 