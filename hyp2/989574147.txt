state diagrams are used to give an abstract description of the behavior of a system hereby '' each diagram usually represents objects of a single class and track the different states of its objects through the system '' edges Î´ : represent transitions from one state to another as caused by the input ( identified by their symbols drawn on the edges ) this mapping describes the state transition that is to occur on input of a particular symbol start state q 0 : ( not shown in the examples below ) mcclusky , introduction to the theory of switching circuits , mcgraw-hill , 1965 the start state is not shown and must be inferred from the text the diagram type allows the modeling of superstates , orthogonal regions , and activities as part of a state classic state diagrams require the creation of distinct nodes for every valid combination of parameters that define the state with harel statecharts it is possible to model multiple cross-functional state diagrams within the statechart there are other sets of semantics available to represent state diagrams in contrast , the flowchart ( panel ( b ) ) does not need explicit events but rather transitions from node to node in its graph automatically upon completion of activities if no variables exist , then the state consists only of the program counter , which keeps track of where in the program we are during execution ( what is the next command to be applied ) now consider the full case , when variables exist and are affected by the program commands being executed then between different program counter locations , not only does the program counter change , but variables might also change values , due to the commands executed however , if the state includes variables , then if those change value , we can be at the same program location with different variable values , meaning in a different state in the program 's state space this results from the state being the program location ( here cycling ) combined with the counter value , which is strictly increasing ( until the overflow ) , so different states are visited in sequence , until the overflow a state machine generally has no notion of such a progression the door state machine shown at the top of this article , for example , is not in a more advanced stage when it is in the '' closed '' state , compared to being in the '' opened '' state ; it simply reacts differently to the open/close events a state in a state machine is an efficient way of specifying a particular behavior , rather than a stage of processing this only makes sense if the system is allowed to be in multiple states at once , which implies that an individual state only describes a condition or other partial aspect of the overall , global state 