since applications can communicate either with or without tls ( or ssl ) , it is necessary for the client to indicate to the server the setup of a tls connection during this handshake , the client and server agree on various parameters used to establish the connection 's security : the handshake begins when a client connects to a tls-enabled server requesting a secure connection and the client presents a list of supported cipher suites ( ciphers and hash functions ) however , applications generally use tls as if it were a transport layer , even though applications using tls must actively control initiating tls handshakes and handling of exchanged authentication certificates to provide the server name , transport layer security ( tls ) extensions allow clients to include a server name indication extension ( sni ) in the extended clienthello message also documents a method to implement name-based virtual hosting by upgrading http to tls via an http/1.1 upgrade header normally this is to securely implement http over tls within the main '' http '' uri scheme ( which avoids forking the uri space and reduces the number of used ports ) , however , few implementations currently support this the current approved version of tls is version 1.3 , which is specified in : : '' the transport layer security ( tls ) protocol version 1.3 '' : '' the transport layer security ( tls ) protocol version 1.1 '' : '' the transport layer security ( tls ) protocol version 1.2 '' : '' upgrading to tls within http/1.1 '' , explains how to use the http/1.1 upgrade header to initiate transport layer security ( tls ) over an existing tcp connection : '' transport layer security ( tls ) extensions '' , adds a mechanism for negotiating protocol extensions during session initialisation and defines some extensions : '' pre-shared key ciphersuites for transport layer security ( tls ) '' , adds three sets of new cipher suites for the tls protocol to support authentication based on pre-shared keys : '' transport layer security ( tls ) extensions '' describes both a set of specific extensions and a generic extension mechanism : '' transport layer security ( tls ) authorization extensions '' : '' camellia cipher suites for tls '' : '' transport layer security ( tls ) extensions : extension definitions '' , includes server name indication and ocsp stapling : '' using openpgp keys for transport layer security ( tls ) authentication '' : '' transport layer security ( tls ) session hash and extended master secret extension '' was designed to provide security protection equivalent to tls/ssl '' ; quic 's main goal is to improve perceived performance of connection-oriented web applications that are currently using tcp server-gated cryptography tcpcrypt dtls tls acceleration specifications ( see for older ssl 2.0 , ssl 3.0 , tls 1.0 , tls 1.1 links ) the transport layer security ( tls ) protocol version 1.2 ietf ( internet engineering task force ) tls workgroup ; tls version intolerance tls version intolerance tls 1.3 and version intolerance ; other owasp : transport layer protection cheat sheet a talk on ssl/tls that tries to explain things in terms that people might understand 