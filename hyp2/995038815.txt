in the simplest implementation , the clerk at the front desk knows only the number of free rooms available , which they only know correctly if all of the students actually use their room while they 've signed up for them and return them when they 're done some other mechanism ( possibly involving more semaphores ) may be required to select a particular free resource the paradigm is especially powerful because the semaphore count may serve as a useful trigger for a number of different actions this includes : requesting a resource and forgetting to release it ; releasing a resource that was never requested ; holding a resource for a long time without needing it ; using a resource without requesting it first ( or after releasing it ) even if all processes follow these rules , multi-resource deadlock may still occur when there are different resources managed by different semaphores and when processes need to use more than one resource at a time , as illustrated by the dining philosophers problem the p operation wastes time or sleeps until a resource protected by the semaphore becomes available , at which time the resource is immediately claimed the v operation is the inverse : it makes a resource available again after the process has finished using it one important property of semaphore s is that its value can not be changed except by using the v and p operations if the new value of the semaphore variable is negative , the process executing is blocked ( i.e otherwise , the process continues execution , having used a unit of the resource when processes have different priorities the queue may be ordered by priority , so that the highest priority process is taken from the queue first this approach does not work on multiprocessor systems where it is possible for two programs sharing a semaphore to run on different processors at the same time consider a system that can only support ten users ( s 10 ) they communicate using a queue of maximum size n and are subject to the following conditions : the consumer must wait for the producer to produce something if the queue is empty ; the producer must wait for the consumer to consume something if the queue is full to maintain integrity , emptycount may be lower ( but never higher ) than the actual number of empty places in the queue , and fullcount may be lower ( but never higher ) than the actual number of items in the queue the binary semaphore usequeue ensures that the integrity of the state of the queue itself is not compromised , for example by two producers attempting to add items to an empty queue simultaneously , thereby corrupting its internal state no more than n producers may enter their critical section due to emptycount constraining their entry note that emptycount may be much lower than the actual number of empty places in the queue , for example in the case where many producers have decremented it but are waiting their turn on usequeue before filling empty places dijkstra subsequently wrote that he intended p to stand for prolaag , short for probeer te verlagen , literally '' try to reduce '' , or to parallel the terms used in the other case , '' try to decrease '' in software engineering practice , they are often called signal and wait , release and acquire ( which the standard java library uses ) , or post and pend 