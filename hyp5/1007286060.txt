it defers the task of completing the semantics to a later stage , which is then done either by human interpretation or by interpretation through software like code or test case generators formal methods can be used at a number of levels : level 0 : formal specification may be undertaken and then a program developed from this informally daniel jackson and jeannette wing , '' lightweight formal methods '' , ieee computer , april 1996 vinu george and rayford vaughn , '' application of lightweight formal methods in requirement engineering '' , crosstalk : the journal of defense software engineering , january 2003 they contend that the expressiveness of the languages involved , as well as the complexity of the systems being modelled , make full formalization a difficult and expensive task as an alternative , various lightweight formal methods , which emphasize partial specification and focused application , have been proposed 256-290 denney 's synthesis of some aspects of the z notation with use case driven development , richard denney , succeeding with use cases : working smart to deliver quality , addison-wesley professional publishing , 2005 , formal methods may be used to give a description of the system to be developed , at whatever level ( s ) of detail desired this formal description can be used to guide further development activities ( see following sections ) ; additionally , it can be used to verify that the requirements for the system being developed have been completely and accurately specified , or formalising system requirements by expressing them in a formal language with a precise and unambiguously defined syntax and semantics the need for formal specification systems has been noted for years once a formal specification has been produced , the specification may be used as a guide while the concrete system is developed during the design process ( i.e formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification once a formal specification has been developed , the specification may be used as the basis for proving properties of the specification ( and hopefully by inference the developed system ) automated techniques fall into three general categories : automated theorem proving , in which a system attempts to produce a formal proof from scratch , given a description of the system , a set of logical axioms , and a set of inference rules abstract interpretation , in which a system verifies an over-approximation of a behavioural property of the program , using a fixpoint computation over a ( possibly complete ) lattice representing it the training required to use such systems is also less than that required to produce good mathematical proofs by hand , making the techniques accessible to a wider variety of practitioners some modern model checking tools produce a '' proof log '' detailing each step in their proof , making it possible to perform , given suitable tools , independent verification dansk datamatik center used formal methods in the 1980s to develop a compiler system for the ada programming language that went on to become a long-lived commercial product similarly , ibm has used formal methods in the verification of power gates , c in software development , formal methods are mathematical approaches to solving software ( and hardware ) problems at the requirements , specification , and design levels for sequential software , examples of formal methods include the b-method , the specification languages used in automated theorem proving , raise , and the z notation for concurrent software and systems , petri nets , process algebra , and finite state machines ( which are based on automata theory - see also virtual finite state machine or event driven finite state machine ) allow executable software specification and can be used to build up and validate application behaviour another approach to formal methods in software development is to write a specification in some form of logic—usually a variation of first-order logic ( fol ) —and then to directly execute the logic as though it were a program there is also work on mapping some version of english ( or another natural language ) automatically to and from logic , as well as executing the logic directly a feature of systems that support bidirectional english-logic mapping and direct execution of the logic is that they can be made to explain their results , in english , at the business or scientific level abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language formal methods europe ( fme ) formal methods wiki formal methods from foldoc ; archival material formal method keyword on microsoft academic search via archive.org evidence on formal methods uses and impact on industry supported by the deploy project ( eu fp7 ) in archive.org 