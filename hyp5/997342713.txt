a language is usually considered object-based if it includes the basic capabilities for an object : identity , properties , and attributes object-orientation is simply the logical extension of older techniques such as structured programming and abstract data types rather than structure programs as code and data , an object-oriented system integrates the two using the concept of an '' object '' prototype object : a specialized metaobject from which other objects can be created by copying god object : an object that knows or does too much ( it is an example of an anti-pattern ) it can be used equally well as an interface definition language for distributed systems the objects in a distributed computing model tend to be larger grained , longer lasting , and more service-oriented than programming objects details such as which computer the object resides on , what programming language it uses , what operating system , and other platform-specific issues the idl is also usually part of a distributed environment that provides services such as transactions and persistence to all objects in a uniform manner in addition to distributed objects , a number of other extensions to the basic concept of an object have been proposed to enable distributed computing : protocol objects are components of a protocol stack that enclose network communication within an object-oriented interface some of these extensions , such as distributed objects and protocol objects , are domain-specific terms for special types of '' ordinary '' objects used in a certain context ( such as remote method invocation or protocol stack ) others , such as replicated objects and live distributed objects , are more non-standard , in that they abandon the usual case that an object resides in a single location at a time , and apply the concept to groups of entities ( replicas ) that might span across multiple locations , might have only weakly consistent state , and whose membership might dynamically change owl adds a richer object model , based on set theory , that provides additional modeling capabilities such as multiple inheritance owl objects tend to be similar to the kinds of objects used to define application domain models in programming languages such as java and c++ programming objects and most database systems use the '' closed-world assumption '' 