the most obvious features offered in xsd that are not available in xml 's native document type definitions ( dtds ) are namespace awareness and datatypes , that is , the ability to define element and attribute content as containing values such as integers and dates rather than arbitrary text technically , a schema is an abstract collection of metadata , consisting of a set of schema components : chiefly element and attribute declarations and complex and simple type definitions these components are usually created by processing a collection of schema documents , which contain the source language definitions of these components in popular usage , however , a schema document is often referred to as a schema when an instance document is validated against a schema ( a process known as assessment ) , the schema to be used for validation can either be supplied as a parameter to the validation engine , or it can be referenced directly from the instance document using two special attributes , xsi : schemalocation and xsi : nonamespaceschemalocation an attribute use represents the relationship of a complex type and an attribute declaration , and indicates whether the attribute is mandatory or optional when it is used in that type simple types ( also called data types ) constrain the textual values that may appear in an element or attribute this is one of the more significant ways in which xml schema differs from dtds complex types describe the permitted content of an element , including its element and text children and its attributes a complex type definition consists of a set of attribute uses and a content model varieties of content model include : element-only content , in which no text may appear ( other than whitespace , or text enclosed by a child element ) simple content , in which text is allowed but child elements are not empty content , in which neither text nor child elements are allowed mixed content , which permits both elements and text to appear a complex type can be derived from another complex type by restriction ( disallowing some elements , attributes , or values that the base type permits ) or by extension ( allowing additional attributes and elements to appear ) in xsd 1.1 , a complex type may be constrained by assertions â€” xpath 2.0 expressions evaluated against the content that must evaluate to true after xml schema-based validation , it is possible to express an xml document 's structure and content in terms of the data model that was implicit during validation the xml schema data model includes : the vocabulary ( element and attribute names ) the content model ( relationships and structure ) the data types this collection of information is called the post-schema-validation infoset ( psvi ) the primary reason for defining an xml schema is to formally describe an xml document ; however the resulting schema has a number of other uses that go beyond simple validation the schema can be used to generate human-readable documentation of an xml file structure ; this is especially useful where the authors have made use of the annotation elements content and attribute declarations can not depend on attributes or element context ( this was also listed as a central problem of dtd ) this point is amplified by uche ogbuji more on xml class warfare - o'reilly onlamp blog the two tasks of validation and augmentation ( adding type information and default values ) should be kept separate significant new features in xsd 1.1 are : the ability to define assertions against the document content by means of xpath 2.0 expressions ( an idea borrowed from schematron ) 