another unusual feature is that methods do not '' belong '' to classes ; classes do not provide a namespace for generic functions or methods a generic function is an object which is callable like a function and which associates a collection of methods with a shared name and argument structure , each specialized for different arguments clos does not by default support dispatch over all common lisp data types ( for example dispatch does not work for fully specialized array types or for types introduced by deftype ) however , most common lisp implementations provide a metaobject protocol which allows generic functions to provide application specific specialization and dispatch rules selected methods from this list are then combined into an effective method using the method combination used by the generic function adding or removing methods thus may lead to changed effective methods ( even when the generic function is called with the same arguments ) at runtime changing the method combination also may lead to different effective methods additionally , the programmer can specify whether all possible primary methods along the class hierarchy should be called or just the one providing the closest match the standard method-combination provides the primary , before , after and around methods explained above new ( both simple and complex ) method-combinations and method types can be defined clos supports changing class definitions on-the-fly ( even when instances of the class in question already exist ) as well as changing the class membership of a given instance through the change-class operator clos also allows one to add , redefine and remove methods at runtime in the design patterns in dynamic languages slides , peter norvig presents his findings that 16 out of 23 design patterns taken from various textbooks are either '' invisible or simpler '' in dylan or common lisp than in c++ thus it is possible to create new object-systems by extending or changing the provided clos functionality the various common lisp implementations have slightly different support for the meta-object protocol because of the power and expressivity of clos , as well as the historical availability of tinyclos ( a simplified portable clos implementation written by gregor kiczales for use with scheme ) , clos-like mop-based object systems have become the de facto norm in most lisp dialect implementations , as well as finding their way into some other languages ' oop facilities : cos , the c object system cos , the c object system dylan dynace , a ( largely ) clos implementation in c dynace object oriented extension to c eieio for emacs lisp gabriel and linda demichiel provides a good introduction to the motivation for defining classes by means of generic functions 