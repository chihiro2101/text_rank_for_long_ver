thumb the original pic was intended to be used with general instrument 's new cp1600 16-bit central processing unit ( cpu ) this meant that communicating with a device required the device to watch for key memory locations being accessed on one machine cycle , and then read the data on the next this made i/o on the machine slower as the bus alternated between address and data modes , and more expensive to implement as the devices had to latch inputs over multiple cycles the idea was that a system would have one or more of the low-cost pics performing the actual i/o with the devices , and then sending that data to the cpu the pic used simple microcode stored in rom to perform its tasks , and although the term risc was not used at the time , it shares some common features with risc designs at the same time plessey in the uk released nmos processors numbered pic1650 and pic1655 based on the gi design , using the same instruction sets , either user mask programmable or versions pre-programed for auto-diallers and keyboard interfaces today , a huge variety of pics are available with various on-board peripherals ( serial communication modules , uarts , motor control kernels , etc ) and program memory from 256 words to 64k words and more ( a '' word '' is one assembly language instruction , varying in length from 8 to 16 bits , depending on the specific pic micro family ) the baseline and mid-range families use 8-bit wide data memory , and the high-end families use 16-bit data memory these devices feature a 12-bit wide code memory , a 32-byte register file , and a tiny two level deep call stack call and goto instructions specify the low 9 bits of the new code location ; additional high-order bits are taken from the status register pic10f32x devices feature a mid-range 14-bit wide code memory of 256 or 512 words , a 64-byte sram register file , and an 8-level deep hardware stack these devices feature a 14-bit wide code memory , and an improved 8-level deep call stack the instruction set differs very little from the baseline devices , but the two additional opcode bits allow 128 registers and 2048 words of code to be directly addressed ) the pclath register supplies high-order instruction address bits when the 8 bits supplied by a write to the pcl register , or the 11 bits supplied by a goto or call instruction , is not sufficient to address the available rom space the 17 series introduced a number of important new features : a memory mapped accumulator read access to code memory ( table reads ) direct register to register moves ( prior cores needed to move registers through the accumulator ) an external program memory interface to expand the code space an 8-bit × 8-bit hardware multiplier a second indirect register pair auto-increment/decrement addressing controlled by control bits in a status register ( alusta ) a significant limitation was that ram space was limited to 256 bytes ( 26 bytes of special function registers , and 232 bytes of general-purpose ram ) , with awkward bank-switching in the models that supported more the 18 series inherits most of the features and instructions of the 17 series , while adding a number of important new features : call stack is 21 bits wide and much deeper ( 31 levels deep ) the call stack may be read and written ( tosu : tosh : tosl registers ) conditional branch instructions indexed addressing mode ( plusw ) extending the fsr registers to 12 bits , allowing them to linearly address the entire data address space the addition of another fsr register ( bringing the number up to 3 ) the ram space is 12 & nbsp ; bits , addressed using a 4-bit bank select register and an 8-bit offset in each instruction the auto increment/decrement feature was improved by removing the control bits and adding four new indirect registers per fsr in more advanced pic18 devices , an '' extended mode '' is available which makes the addressing even more favorable to compiled code : a new offset addressing mode ; some addresses which were relative to the access bank are now interpreted relative to the fsr2 register the addition of several new instructions , notable for manipulating the fsr registers although still similar to earlier pic architectures , there are significant enhancements : all registers are 16 bits wide program counter is 22 bits ( bits 22:1 ; bit 0 is always 0 ) instructions are 24 bits wide data address space expanded to 64 & nbsp ; kib first 2 & nbsp ; kib is reserved for peripheral control registers data bank switching is not required unless ram exceeds 62 & nbsp ; kib '' f operand '' direct addressing extended to 13 bits ( 8 & nbsp ; kib ) 16 w registers available for register-register operations ) instructions come in byte and ( 16-bit ) word forms stack is in ram ( with w15 as stack pointer ) ; there is no hardware stack w14 is the frame pointer data stored in rom may be accessed directly ( '' program space visibility '' ) vectored interrupts for different interrupt sources some features are : ( 16×16 ) -bit single-cycle multiplication and other digital signal processing operations hardware multiply–accumulate ( mac ) hardware divide assist ( 19 cycles for 32/16-bit divide ) barrel shifter - for both accumulators and general purpose registers bit reversal hardware support for loop indexing peripheral direct memory access dspics can be programmed in c using microchip 's xc16 compiler ( formerly called c30 ) which is a variant of gcc the first 18 models currently in production ( pic32mx3xx and pic32mx4xx ) are pin to pin compatible and share the same peripherals set with the pic24fxxga0xx family of ( 16-bit ) devices allowing the use of common libraries , software and hardware tools today , starting at 28 pin in small qfn packages up to high performance devices with ethernet , can and usb otg , full family range of mid-range 32-bit microcontrollers are available the pic32 architecture brought a number of new features to microchip portfolio , including : the highest execution speed 80 & nbsp ; mips ( 120+ dhrystone the largest flash memory : 512 & nbsp ; kb one instruction per clock cycle execution the first cached processor allows execution from ram full speed host/dual role and otg usb capabilities full jtag and 2-wire programming and debugging real-time trace their key advantage is to support the 16bits instructions of mips making program size much more compact ( about 40 % ) except pic32 : the mips m4k architecture 's separate data and instruction paths are effectively merged into a single common address space by the system bus matrix module a small number of fixed-length instructions most instructions are single-cycle ( 2 clock cycles , or 4 clock cycles in 8-bit models ) , with one delay cycle on branches and skips one accumulator ( w0 ) , the use of which ( as source operand ) is implied ( i.e a hardware stack for storing return addresses a small amount of addressable data space ( 32 , 128 , or 256 bytes , depending on the family ) , extended through banking data-space mapped cpu , port , and peripheral registers alu status flags are mapped into the data space the program counter is also mapped into the data space and writable ( this is used to implement indirect jumps ) the addressability of memory varies depending on device series , and all pic devices have some bank switching to extend addressing to additional memory later devices extended this concept with post- and pre- increment/decrement for greater efficiency in accessing sequentially stored data external data memory is not directly addressable except in some pic18 devices with high pin count in order to be clear , the program memory capacity is usually stated in number of ( single-word ) instructions , rather than in bytes the instruction set includes instructions to perform a variety of operations on registers directly , the accumulator and a literal constant or the accumulator and a register , as well as for conditional execution , and program branching some operations , such as bit setting and testing , can be performed on any numbered register , but bi-operand arithmetic operations always involve w ( the accumulator ) , writing the result back to either w or the other operand register the 18 series implemented shadow registers , registers which save several important registers during an interrupt , providing hardware support for automatically saving processor state when servicing interrupts one instruction peculiar to the pic is retlw , load immediate into wreg and return , which is used with computed branches to produce lookup tables the harvard architecture , in which instructions and data come from separate sources , simplifies timing and microcircuit design greatly , and this benefits clock speed , price , and power consumption small instruction set to learn risc architecture built-in oscillator with selectable speeds easy entry level , in-circuit programming plus in-circuit debugging pickit units available for less than 50 inexpensive microcontrollers wide range of interfaces including i²c , spi , usb , usart , a/d , programmable comparators , pwm , lin , can , psp , and ethernet availability of processors in dil package make them easy to handle for hobby use one accumulator register-bank switching is required to access the entire ram of many devices operations and registers are not orthogonal ; some instructions can address ram and/or immediate constants , while others can use the accumulator only the following stack limitations have been addressed in the pic18 series , but still apply to earlier cores : the hardware call stack is not addressable , so preemptive task switching can not be implemented software-implemented stacks are not efficient , so it is difficult to generate reentrant code and support local variables with paged program memory , there are two page sizes to worry about : one for call and goto and another for computed goto ( typically used for table lookups ) the f in a picmicro part number generally indicates the picmicro uses flash memory and can be erased electronically devices called '' programmers '' are traditionally used to get program code into the target pic many of the higher end flash based pics can also self-program ( write to their own program memory ) , a process known as bootloading demo boards are available with a small bootloader factory programmed that can be used to load user programs over an interface such as rs-232 or usb , thus obviating the need for a programmer device there are many programmers for pic microcontrollers , ranging from the extremely simple designs which rely on icsp to allow direct download of code from a host computer , to intelligent programmers that can verify the device at several supply voltages the intelligent type of programmer is needed to program earlier pic models ( mostly eprom type ) which do not support in-circuit programming some are simple designs which require a pc to do the low-level programming signalling ( these typically connect to the serial or parallel port and consist of a few simple components ) , while others have the programming logic built into them ( these typically use a serial or usb connection , are usually faster , and are often built using pics themselves for control ) this debugging system comes at a price however , namely limited breakpoint count ( 1 on older devices , 3 on newer devices ) , loss of some i/o ( with the exception of some surface mount 44-pin pics which have dedicated lines for debugging ) and loss of some on-chip features to debug these devices , a special -icd version of the chip mounted on a daughter board which provides dedicated ports is required for example : the 12f690-icd will function as one of six different parts each of which features one , some or all of five on chip peripherals all such tools are typically used in conjunction with mplab ide for source-level interactive debugging of code running on the target they include up to 4096 12-bit words of flash memory and up to 262 bytes of random access memory , an eight bit counter and other support logic other interfaces are relatively easy to write , and existing modules can be modified to get new features in taiwan make a line of microcontrollers based on the pic16 architecture , with 13-bit instructions and a smaller ( 6-bit ) ram address space 