using the command design pattern can solve these problems : coupling the invoker of a request to a particular request should be avoided using the command design pattern describes the following solution : define separate ( command ) objects that encapsulate a request this enables one to configure a class with a command object that is used to perform a request ; macro recording : if all user actions are represented by command objects , a program can record a sequence of actions simply by keeping a list of the command objects as they are executed ; multi-level undo : if all user actions in a program are implemented as command objects , the program can keep a stack of the most recently executed commands when the user wants to undo a command , the program simply pops the most recent command object and executes its method ; parallel processing : where the commands are written as tasks to a shared resource and executed by many threads in parallel ( possibly on remote machines ; this variant is often referred to as the master/worker pattern ) ; progress bars : suppose a program has a sequence of commands that it executes in order typically these objects implement a common interface such as that allows the thread pool to execute the command even though the thread pool class itself was written without any knowledge of the specific tasks for which it would be used in these cases , a natural way to separate user interface code from application code is to implement the wizard using a command object this may be appropriate when each object on the stack must contain information that allows the command to be undone note that using a separate object for each invocation of a command is also an example of the chain of responsibility pattern it may refer to running the code identified by the command object 's execute method however , in microsoft 's windows presentation foundation a command is considered to have been executed when the command 's execute method has been invoked , but that does not necessarily mean that the application code has run on the other hand , if the code is defined by the command object itself , the target object will be a different object entirely some implementations add more information to the command/event object as it is being passed from one object ( e.g implementations that go well beyond the original command pattern as a result , the command object no longer contains a reference to the target object nor a reference to the application code a benefit of this particular implementation of the command pattern is that the switch can be used with any device , not just a light 