at the time , 1 megabyte was considered a relatively large amount of memory , so the designers of the ibm personal computer reserved the first 640 kilobytes for use by applications and the operating system and upper memory area for the bios ( basic input/output system ) and memory for peripheral acceptance was additionally hampered by the fact that the 286 only allowed memory access in 16 bit segments via each of four segment registers , meaning only 4 2 16 bytes , equivalent to 256 kilobytes , could be accessed at a time because changing a segment register in protected mode caused a 6-byte segment descriptor to be loaded into the cpu from memory , the segment register load instruction took many tens of processor cycles , making it much slower than on the 8086 ; therefore , the strategy of computing segment addresses on-the-fly in order to access data structures larger than 128 kilobytes ( the combined size of the two data segments ) became impractical , even for those few programmers who had mastered it on the 8086/8088 to access the extended functionality of the 286 , the operating system would set up some tables in memory that controlled memory access in protected mode , set the addresses of those tables into some special registers of the processor , and then set the processor into protected mode the segment sizes were also increased to 32 bits , meaning that the full address space of 4 gigabytes could be accessed without the need to switch between multiple segments hardware support required for virtualizing the protected mode itself , however , had to wait for another 20 years with the release of the 386 , the following additional features were added to protected mode : paging 32-bit physical and virtual address space ( the 32-bit physical address space is not present on the 80386sx , and other 386 processor variants which use the older 286 bus until the release of the 386 , protected mode did not offer a direct method to switch back into real mode once protected mode was entered in an ibm-compatible machine , the a20 line ( 21st address line ) also must be enabled to allow the use of all the address lines so that the cpu can access beyond 1 megabyte of memory ( only the first 20 are allowed to be used after power-up , to guarantee compatibility with older software written for the intel 8088-based ibm pc and pc/xt models ) with the release of the 386 , protected mode could be exited by loading the segment registers with real mode values , disabling the a20 line and clearing the pe bit in the cr0 register , without the need to perform the initial setup steps required with the 286 protected mode has a number of features designed to enhance an operating system 's control over application software , in order to increase security and system stability if an application utilized or relied on any of the techniques below , it would not run : segment arithmetic privileged instructions direct hardware access self-modifying code executing data overlapping segments use of bios functions , due to the bios interrupts being reserved by intel in reality , almost all dos application programs violated these rules programs that require segment manipulation , privileged instructions , direct hardware access , or use self-modifying code will generate an exception that must be served by the operating system in real mode each logical address points directly into physical memory location , every logical address consists of two 16 bit parts : the segment part of the logical address contains the base address of a segment with a granularity of 16 bytes , i.e in addition to adding virtual 8086 mode , the 386 also added paging to protected mode the tss allows general-purpose registers , segment selector fields , and stacks to all be modified without affecting those of another task os/2 1.x defines restrictive programming rules allowing a family api or bound program to run in either real or protected mode windows & nbsp ; 3.0 was able to run real mode programs in 16-bit protected mode ; when switching to protected mode , it decided to preserve the single privilege level model that was used in real mode , which is why windows applications and dlls can hook interrupts and do direct hardware access if a windows 1.x or 2.x program is written properly and avoids segment arithmetic , it will run the same way in both real and protected modes windows programs generally avoid segment arithmetic because windows implements a software virtual memory scheme , moving program code and data in memory when programs are not running , so manipulating absolute addresses is dangerous ; programs should only keep handles to memory blocks when not running starting an old program while windows & nbsp ; 3.0 is running in protected mode triggers a warning dialog , suggesting to either run windows in real mode or to obtain an updated version of the application in modern 32-bit operating systems , virtual 8086 mode is still used for running applications , e.g however , 64-bit operating systems ( which run in long mode ) no longer use this , since virtual 8086 mode has been removed from long mode . 