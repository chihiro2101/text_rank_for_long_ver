, implementing the traversal across a container , applying the given function to every element in turn an external iterator may be thought of as a type of pointer that has two primary operations : referencing one particular element in the object collection ( called element access ) , and modifying itself so it points to the next element ( called element traversal ) depending on the language and intended use , iterators may also provide additional operations or exhibit different behaviors the primary purpose of an iterator is to allow a user to process every element of a container while isolating the user from the internal structure of the container this allows the container to store elements in any manner it wishes while allowing the user to treat it as if it were a simple sequence or list one way of implementing iterators is to use a restricted form of coroutine , known as a generator or other times they may be created by the collection object itself , as in this ruby example : iterable.each do value puts value end this iteration style is sometimes called '' internal iteration '' because its code fully executes within the context of the iterable object ( that controls all aspects of iteration ) , and the programmer only provides the operation to execute at each step ( using an anonymous function ) although indexing may also be used with some object-oriented containers , the use of iterators may have some advantages : counting loops are not suitable to all data structures , in particular to data structures with no or slow random access , like lists or trees iterators can provide a consistent way to iterate on data structures of all kinds , and therefore make the code more readable , reusable , and less sensitive to a change in the data structure an alternative way to keep the number of updates bound relatively to the container size would be to use a kind of handle mechanism , that is a collection of indirect pointers to the container 's elements that must be updated with the container , and let the iterators point to these handles instead of directly to the data elements this is usually not desirable , because many algorithms using the iterators invoke the iterators data access operation more often than the advance method 