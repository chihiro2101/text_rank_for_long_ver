that is , unlike low-level languages like assembly or machine language , high-level programming can amplify the programmer 's instructions and trigger a lot of data movements in the background without their knowledge high-level languages intend to provide features which standardize common tasks , permit rich debugging , and maintain architectural agnosticism ; while low-level languages often produce more efficient code through optimization for a specific system architecture high-level programming exhibits features like more generic data structures and operations , run-time interpretation , and intermediate code files ; which often result in execution of far more operations than necessary , higher memory consumption , and larger binary program size however , with the growing complexity of modern microprocessor architectures , well-designed compilers for high-level languages frequently produce code comparable in efficiency to what most low-level programmers can produce by hand , and the higher abstraction may allow for more powerful techniques providing better overall results than their low-level counterparts in particular settings some decades ago , the c language , and similar languages , were most often considered '' high-level '' , as it supported concepts such as expression evaluation , parameterised recursive functions , and data types and structures , while assembly language was considered '' low-level '' assembly language may itself be regarded as a higher level ( but often still one-to-one if used without macros ) representation of machine code , as it supports concepts such as constants and ( limited ) expressions , sometimes even variables , procedures , and data structures this is the original mode of compilation , and languages that are directly and completely transformed to machine-native code in this way may be called truly compiled languages : ; intermediate representations : when code written in a language is compiled to an intermediate representation , that representation can be optimized or saved for later execution without the need to re-read the source file virtual machines that execute bytecode directly or transform it further into machine code have blurred the once clear distinction between intermediate representations and truly compiled languages alternatively , it is possible for a high-level language to be directly implemented by a computer â€“ the computer directly executes the hll code 